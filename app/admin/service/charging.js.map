{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\admin\\service\\charging.js"
    ],
    "names": [
        "think",
        "require",
        "module",
        "exports",
        "Service",
        "tea",
        "seatInfo",
        "price",
        "time_out_price",
        "ohter_out_price",
        "out_date",
        "other_out_date",
        "charging_type",
        "max_time",
        "currTime",
        "Date",
        "now",
        "basics_price",
        "maxTime",
        "start_time",
        "MoreTime",
        "Math",
        "floor",
        "MoreYu",
        "console",
        "log",
        "other_time",
        "getOterTime",
        "other_price_start_time",
        "other_price_end_time",
        "otherTimeYu",
        "other_price",
        "goodsPrice",
        "model",
        "where",
        "seat_id",
        "id",
        "order_id",
        "sum",
        "isEmpty",
        "logger",
        "info",
        "start_time2",
        "other_start_date",
        "other_end_date",
        "all_time",
        "other_start_time",
        "datetime",
        "other_end_time",
        "getTime"
    ],
    "mappings": "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",
    "file": "..\\..\\..\\src\\admin\\service\\charging.js",
    "sourcesContent": [
        "'use strict';\r\n\r\nconst { think } = require(\"thinkjs\");\r\n\r\nmodule.exports = class extends think.Service {\r\n\r\n  /**\r\n   * 茶楼计费模型\r\n   * @param {*} 座位数据\r\n   */\r\n  async tea(seatInfo) {\r\n    let price = 0; // 计算费用\r\n    let time_out_price = 0; // 超时费\r\n    let ohter_out_price = 0; // 服务费\r\n    let out_date = 0; // 超时时间\r\n    let other_out_date = 0; // 服务费计算时间\r\n    // 判断座位类型，如果是包间则需计算基础费用，如果不是包间则不需要计算基础费用\r\n    if (seatInfo.charging_type && seatInfo.max_time) {\r\n      // 当前时间\r\n      const currTime = Date.now();\r\n      // const currTime = 1601655609000;\r\n      price = price + seatInfo.basics_price; // 加入基础费用\r\n      // 计算超时费\r\n      const maxTime = seatInfo.start_time + seatInfo.max_time * 60 * 60 * 1000;\r\n      // 没有超出5分钟不计费\r\n      if (currTime > maxTime) {\r\n        let MoreTime = currTime - maxTime; // 得出超出的时间\r\n        MoreTime = Math.floor(MoreTime / 1000 / 60) // 得到超出多少分钟\r\n        const MoreYu = MoreTime % 30; // 取余\r\n        out_date = Math.floor(MoreTime / 60) + '小时' + MoreTime % 60 + '分';\r\n        MoreTime = Math.floor(MoreTime / 30);\r\n        if (MoreYu > 5) MoreTime = MoreTime + 1; // 没超出规定时间5分钟则不计费\r\n        console.log('超时多少个小时', MoreTime / 2, MoreYu)\r\n        time_out_price = MoreTime * seatInfo.time_out_price; // 超时费\r\n        price = price + time_out_price;\r\n\r\n        let other_time = this.getOterTime(seatInfo.start_time, seatInfo.start_time, currTime, seatInfo.other_price_start_time, seatInfo.other_price_end_time);\r\n        // 服务费\r\n        // 产生了服务费\r\n        if (other_time > 0) {\r\n          other_time = Math.floor(other_time / 1000 / 60);\r\n          const otherTimeYu = other_time % 30;\r\n          other_out_date = Math.floor(other_time / 60) + '小时' + other_time % 60 + '分';\r\n          other_time = Math.floor(other_time / 30);\r\n          if (otherTimeYu > 5) { \r\n            other_time = other_time + 1; \r\n          }\r\n          ohter_out_price = other_time * seatInfo.other_price;\r\n\r\n          price = price + ohter_out_price;\r\n        }\r\n      }\r\n      \r\n    }\r\n    let goodsPrice = await this.model('yxd_seat_goods_order').where({ seat_id: seatInfo.id, order_id: seatInfo.order_id }).sum('price');\r\n    if (!think.isEmpty(goodsPrice)) price = price + goodsPrice;\r\n    think.logger.info('当前价格为', price, time_out_price, ohter_out_price);\r\n    goodsPrice = goodsPrice ? goodsPrice : 0;\r\n    return {price, time_out_price, ohter_out_price, out_date, other_out_date, goodsPrice };\r\n  }\r\n  /**\r\n   * 计算收取服务费的总时间\r\n   * @param {*} start_time 座位计费时间 常量\r\n   * @param {*} start_time2 开始时间 变量\r\n   * @param {*} currTime 当前时间 常量\r\n   * @param {*} other_start_date 服务费开始时间 常量\r\n   * @param {*} other_end_date 服务费结束时间 常量\r\n   * @param {*} all_time 总时间 变量\r\n   */\r\n  getOterTime(start_time, start_time2, currTime, other_start_date, other_end_date, all_time = 0) {\r\n    let other_start_time = think.datetime(start_time2, 'YYYY-MM-DD') + ' ' + other_start_date; // 起始时间\r\n    let other_end_time = think.datetime(start_time2, 'YYYY-MM-DD') + ' ' + other_end_date;  // 结束时间\r\n    other_start_time = new Date(other_start_time).getTime(); // 计费起始时间\r\n    other_end_time = new Date(other_end_time).getTime(); // 计费结束时间\r\n    think.logger.info('起始时间', think.datetime(other_start_time, 'YYYY-MM-DD HH:mm'))\r\n    think.logger.info('结束时间', think.datetime(other_end_time, 'YYYY-MM-DD HH:mm'))\r\n    other_end_time = other_end_time > currTime ? currTime : other_end_time; // 当前时间是否超过结束时间没有超过则按照当前时间计算，超过了则按照结束时间计算\r\n    // 说明是在服务计费期间开始计时需要减时间\r\n    if (start_time == start_time2 && start_time >= other_start_time && start_time < other_end_time) {\r\n      all_time = all_time + (other_end_time - other_start_time - (start_time - other_start_time))\r\n      start_time2 = other_start_time + 24 * 60 * 60 * 1000;\r\n      think.logger.info('刚好凌晨计费', all_time);\r\n      if (start_time2 < currTime) return this.getOterTime(start_time, start_time2, currTime, other_start_date, other_end_date, all_time);\r\n      return all_time;\r\n    }\r\n    // 还没有到计算服务费的时间\r\n    if (start_time == start_time2 && start_time > other_end_time) {\r\n      if (currTime < other_start_time + 24 * 60 * 60 * 1000) return all_time;\r\n      start_time2 = other_start_time + 24 * 60 * 60 * 1000;\r\n      if (start_time2 < currTime) return this.getOterTime(start_time, start_time2, currTime, other_start_date, other_end_date, all_time);\r\n    }\r\n    think.logger.info('计算时间比较', think.datetime(currTime, 'YYYY-MM-DD HH:mm'), think.datetime(other_start_time, 'YYYY-MM-DD HH:mm'))\r\n    if (currTime < other_start_time) return all_time; // 当前时间还未到计费时刻\r\n    \r\n    all_time = all_time + (other_end_time - other_start_time);\r\n    think.logger.info('完整计费', Math.floor(all_time / 60 / 1000));\r\n    // 消费时间天+1;\r\n    start_time2  = other_start_time + 24 * 60 * 60 * 1000;    \r\n    if (start_time2 < currTime) return this.getOterTime(start_time, start_time2, currTime, other_start_date, other_end_date, all_time);\r\n    return all_time;\r\n  }\r\n}"
    ]
}