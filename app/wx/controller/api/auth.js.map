{
    "version": 3,
    "sources": [
        "..\\..\\..\\..\\src\\wx\\controller\\api\\auth.js"
    ],
    "names": [
        "Base",
        "require",
        "rp",
        "_",
        "module",
        "exports",
        "loginByWeixinAction",
        "code",
        "post",
        "fullUserInfo",
        "userInfo",
        "clientIp",
        "options",
        "method",
        "url",
        "qs",
        "grant_type",
        "js_code",
        "secret",
        "think",
        "config",
        "appid",
        "sessionData",
        "JSON",
        "parse",
        "openid",
        "fail",
        "crypto",
        "sha1",
        "createHash",
        "update",
        "rawData",
        "session_key",
        "digest",
        "signature",
        "WeixinSerivce",
        "service",
        "weixinUserInfo",
        "decryptUserInfoData",
        "encryptedData",
        "iv",
        "isEmpty",
        "userId",
        "model",
        "where",
        "weixin_openid",
        "getField",
        "add",
        "username",
        "uuid",
        "password",
        "register_time",
        "parseInt",
        "Date",
        "getTime",
        "register_ip",
        "last_login_time",
        "last_login_ip",
        "mobile",
        "avatar",
        "avatarUrl",
        "gender",
        "nickname",
        "nickName",
        "user_id",
        "newUserInfo",
        "field",
        "id",
        "find",
        "TokenSerivce",
        "sessionKey",
        "create",
        "success",
        "token",
        "logoutAction"
    ],
    "mappings": ";;AAAA,MAAMA,OAAOC,QAAQ,WAAR,CAAb;AACA,MAAMC,KAAKD,QAAQ,iBAAR,CAAX;AACA,MAAME,IAAIF,QAAQ,QAAR,CAAV;;AAEAG,OAAOC,OAAP,GAAiB,cAAcL,IAAd,CAAmB;AAC5BM,qBAAN,GAA4B;AAAA;;AAAA;AAC1B,YAAMC,OAAO,MAAKC,IAAL,CAAU,MAAV,CAAb;AACA,YAAMC,eAAe,MAAKD,IAAL,CAAU,UAAV,CAArB;AACA,YAAME,WAAWD,aAAaC,QAA9B;AACA,YAAMC,WAAW,EAAjB,CAJ0B,CAIL;;AAErB;AACA,YAAMC,UAAU;AACdC,gBAAQ,KADM;AAEdC,aAAK,8CAFS;AAGdC,YAAI;AACFC,sBAAY,oBADV;AAEFC,mBAASV,IAFP;AAGFW,kBAAQC,MAAMC,MAAN,CAAa,eAAb,CAHN;AAIFC,iBAAOF,MAAMC,MAAN,CAAa,cAAb;AAJL;AAHU,OAAhB;;AAWA,UAAIE,cAAc,MAAMpB,GAAGU,OAAH,CAAxB;AACAU,oBAAcC,KAAKC,KAAL,CAAWF,WAAX,CAAd;AACA,UAAI,CAACA,YAAYG,MAAjB,EAAyB;AACvB,eAAO,MAAKC,IAAL,CAAU,MAAV,CAAP;AACD;;AAED;AACA,YAAMC,SAAS1B,QAAQ,QAAR,CAAf;AACA,YAAM2B,OAAOD,OAAOE,UAAP,CAAkB,MAAlB,EAA0BC,MAA1B,CAAiCrB,aAAasB,OAAb,GAAuBT,YAAYU,WAApE,EAAiFC,MAAjF,CAAwF,KAAxF,CAAb;AACA,UAAIxB,aAAayB,SAAb,KAA2BN,IAA/B,EAAqC;AACnC,eAAO,MAAKF,IAAL,CAAU,MAAV,CAAP;AACD;;AAED;AACA,YAAMS,gBAAgB,MAAKC,OAAL,CAAa,QAAb,EAAuB,IAAvB,CAAtB;AACA,YAAMC,iBAAiB,MAAMF,cAAcG,mBAAd,CAAkChB,YAAYU,WAA9C,EAA2DvB,aAAa8B,aAAxE,EAAuF9B,aAAa+B,EAApG,CAA7B;AACA,UAAIrB,MAAMsB,OAAN,CAAcJ,cAAd,CAAJ,EAAmC;AACjC,eAAO,MAAKX,IAAL,CAAU,MAAV,CAAP;AACD;;AAED;AACA,UAAIgB,SAAS,MAAM,MAAKC,KAAL,CAAW,SAAX,EAAsBC,KAAtB,CAA4B,EAAEC,eAAevB,YAAYG,MAA7B,EAA5B,EAAmEqB,QAAnE,CAA4E,IAA5E,EAAkF,IAAlF,CAAnB;AACA,UAAI3B,MAAMsB,OAAN,CAAcC,MAAd,CAAJ,EAA2B;AACzB;AACAA,iBAAS,MAAM,MAAKC,KAAL,CAAW,SAAX,EAAsBI,GAAtB,CAA0B;AACvCC,oBAAU,SAAS7B,MAAM8B,IAAN,CAAW,CAAX,CADoB;AAEvCC,oBAAU5B,YAAYG,MAFiB;AAGvC0B,yBAAeC,SAAS,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAhC,CAHwB;AAIvCC,uBAAa5C,QAJ0B;AAKvC6C,2BAAiBJ,SAAS,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAhC,CALsB;AAMvCG,yBAAe9C,QANwB;AAOvC+C,kBAAQ,EAP+B;AAQvCb,yBAAevB,YAAYG,MARY;AASvCkC,kBAAQjD,SAASkD,SAAT,IAAsB,EATS;AAUvCC,kBAAQnD,SAASmD,MAAT,IAAmB,CAVY,EAUT;AAC9BC,oBAAUpD,SAASqD;AAXoB,SAA1B,CAAf;AAaD;;AAEDzC,kBAAY0C,OAAZ,GAAsBtB,MAAtB;;AAEA;AACA,YAAMuB,cAAc,MAAM,MAAKtB,KAAL,CAAW,SAAX,EAAsBuB,KAAtB,CAA4B,CAAC,IAAD,EAAO,UAAP,EAAmB,UAAnB,EAA+B,QAA/B,EAAyC,QAAzC,EAAmD,UAAnD,CAA5B,EAA4FtB,KAA5F,CAAkG,EAAEuB,IAAIzB,MAAN,EAAlG,EAAkH0B,IAAlH,EAA1B;;AAEA;AACA1B,eAAS,MAAM,MAAKC,KAAL,CAAW,SAAX,EAAsBC,KAAtB,CAA4B,EAAEuB,IAAIzB,MAAN,EAA5B,EAA4CZ,MAA5C,CAAmD;AAChE0B,yBAAiBJ,SAAS,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAhC,CAD+C;AAEhEG,uBAAe9C;AAFiD,OAAnD,CAAf;;AAKA,YAAM0D,eAAe,MAAKjC,OAAL,CAAa,OAAb,EAAsB,IAAtB,CAArB;AACA,YAAMkC,aAAa,MAAMD,aAAaE,MAAb,CAAoBjD,WAApB,CAAzB;;AAEA,UAAIH,MAAMsB,OAAN,CAAcwB,WAAd,KAA8B9C,MAAMsB,OAAN,CAAc6B,UAAd,CAAlC,EAA6D;AAC3D,eAAO,MAAK5C,IAAL,CAAU,MAAV,CAAP;AACD;;AAED,aAAO,MAAK8C,OAAL,CAAa,EAAEC,OAAOH,UAAT,EAAqB5D,UAAUuD,WAA/B,EAAb,CAAP;AA3E0B;AA4E3B;;AAEKS,cAAN,GAAqB;AAAA;;AAAA;AACnB,aAAO,OAAKF,OAAL,EAAP;AADmB;AAEpB;AAjFiC,CAApC",
    "file": "..\\..\\..\\..\\src\\wx\\controller\\api\\auth.js",
    "sourcesContent": [
        "const Base = require('./base.js');\nconst rp = require('request-promise');\nconst _ = require('lodash');\n\nmodule.exports = class extends Base {\n  async loginByWeixinAction() {\n    const code = this.post('code');\n    const fullUserInfo = this.post('userInfo');\n    const userInfo = fullUserInfo.userInfo;\n    const clientIp = ''; // 暂时不记录 ip\n\n    // 获取openid\n    const options = {\n      method: 'GET',\n      url: 'https://api.weixin.qq.com/sns/jscode2session',\n      qs: {\n        grant_type: 'authorization_code',\n        js_code: code,\n        secret: think.config('weixin.secret'),\n        appid: think.config('weixin.appid')\n      }\n    };\n\n    let sessionData = await rp(options);\n    sessionData = JSON.parse(sessionData);\n    if (!sessionData.openid) {\n      return this.fail('登录失败');\n    }\n\n    // 验证用户信息完整性\n    const crypto = require('crypto');\n    const sha1 = crypto.createHash('sha1').update(fullUserInfo.rawData + sessionData.session_key).digest('hex');\n    if (fullUserInfo.signature !== sha1) {\n      return this.fail('登录失败');\n    }\n\n    // 解释用户数据\n    const WeixinSerivce = this.service('weixin', 'wx');\n    const weixinUserInfo = await WeixinSerivce.decryptUserInfoData(sessionData.session_key, fullUserInfo.encryptedData, fullUserInfo.iv);\n    if (think.isEmpty(weixinUserInfo)) {\n      return this.fail('登录失败');\n    }\n\n    // 根据openid查找用户是否已经注册\n    let userId = await this.model('wx_user').where({ weixin_openid: sessionData.openid }).getField('id', true);\n    if (think.isEmpty(userId)) {\n      // 注册\n      userId = await this.model('wx_user').add({\n        username: '微信用户' + think.uuid(6),\n        password: sessionData.openid,\n        register_time: parseInt(new Date().getTime() / 1000),\n        register_ip: clientIp,\n        last_login_time: parseInt(new Date().getTime() / 1000),\n        last_login_ip: clientIp,\n        mobile: '',\n        weixin_openid: sessionData.openid,\n        avatar: userInfo.avatarUrl || '',\n        gender: userInfo.gender || 1, // 性别 0：未知、1：男、2：女\n        nickname: userInfo.nickName\n      });\n    }\n\n    sessionData.user_id = userId;\n\n    // 查询用户信息\n    const newUserInfo = await this.model('wx_user').field(['id', 'username', 'nickname', 'gender', 'avatar', 'birthday']).where({ id: userId }).find();\n\n    // 更新登录信息\n    userId = await this.model('wx_user').where({ id: userId }).update({\n      last_login_time: parseInt(new Date().getTime() / 1000),\n      last_login_ip: clientIp\n    });\n\n    const TokenSerivce = this.service('token', 'wx');\n    const sessionKey = await TokenSerivce.create(sessionData);\n\n    if (think.isEmpty(newUserInfo) || think.isEmpty(sessionKey)) {\n      return this.fail('登录失败');\n    }\n\n    return this.success({ token: sessionKey, userInfo: newUserInfo });\n  }\n\n  async logoutAction() {\n    return this.success();\n  }\n};\n"
    ]
}